{"version":3,"file":"weather-forecast.component.js","sourceRoot":"","sources":["../../../src/components/weather-forecast/weather-forecast.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAuB,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAE1E,OAAO,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAGzE;IAAA;QA0BE,mBAAc,GAAG,IAAI,CAAC;IA8BxB,CAAC;IA7BC,sBACI,0CAAI;aADR,UACS,KAAmB;YAC1B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC;YACT,CAAC;YACD,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACd,KAAK,YAAY,CAAC,IAAI;oBACpB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;oBAC3B,KAAK,CAAC;gBACR,KAAK,YAAY,CAAC,QAAQ;oBACxB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;oBAC5B,KAAK,CAAC;gBACR;oBACE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAChC,CAAC;QACH,CAAC;;;OAAA;IAED,sBACI,8CAAQ;aAOZ;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;aAVD,UACa,KAAiB;YAC5B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC;YACT,CAAC;YACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,CAAC;;;OAAA;;gBAlDF,SAAS,SAAC;oBACT,QAAQ,EAAE,kBAAkB;oBAC5B,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,MAAM,EAAE;wBACN,0IAOC;qBACF;oBACD,QAAQ,EAAE,gTAUT;iBACF;;;uBAGE,KAAK;2BAgBL,KAAK;2BACL,KAAK;;IAYR,+BAAC;CAAA,AAxDD,IAwDC;SA/BY,wBAAwB","sourcesContent":["import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Forecast } from '../../services/api/weather.api.service';\nimport { ForecastMode, WeatherSettings } from '../../weather.interfaces';\nimport preventExtensions = Reflect.preventExtensions;\n\n@Component({\n  selector: 'weather-forecast',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [\n    `\n      :host {\n        margin-top: 1em;\n        display: block;\n        width: 100%;\n        box-sizing: border-box;\n      }\n    `\n  ],\n  template: `\n    <weather-forecast-simple-grid\n      *ngIf=\"isGridForecast\"\n      [forecast]=\"forecast\"\n    ></weather-forecast-simple-grid>\n    <weather-forecast-detailed\n      *ngIf=\"!isGridForecast\"\n      [settings]=\"settings\"\n      [forecast]=\"forecast\"\n    ></weather-forecast-detailed>\n  `\n})\nexport class WeatherForecastComponent {\n  isGridForecast = true;\n  @Input()\n  set mode(value: ForecastMode) {\n    if (!value) {\n      return;\n    }\n    switch (value) {\n      case ForecastMode.GRID:\n        this.isGridForecast = true;\n        break;\n      case ForecastMode.DETAILED:\n        this.isGridForecast = false;\n        break;\n      default:\n        this.isGridForecast = false;\n    }\n  }\n  @Input() settings: WeatherSettings;\n  @Input()\n  set forecast(value: Forecast[]) {\n    if (!value) {\n      return;\n    }\n    this._forecast = value;\n  }\n\n  get forecast(): Forecast[] {\n    return this._forecast;\n  }\n  private _forecast: Forecast[];\n}\n"]}