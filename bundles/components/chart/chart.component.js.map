{"version":3,"file":"chart.component.js","sourceRoot":"","sources":["../../../src/components/chart/chart.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,UAAU,EAIX,MAAM,eAAe,CAAC;AACvB,OAAO,KAAK,KAAK,MAAM,UAAU,CAAC;AAClC;IAaE,wBAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAE9C,iCAAQ,GAAR;QACE,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG;YACpB,KAAK,EAAE;gBACL;oBACE,KAAK,EAAE;wBACL,+BAA+B;wBAC/B,QAAQ,EAAE,UAAS,KAAU;4BAC3B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;wBAClC,CAAC;qBACF;iBACF;aACF;SACF,CAAC;QACF,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CACpB,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,EACrD;YACE,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CACF,CAAC;IACJ,CAAC;IAED,oCAAW,GAAX,UAAY,OAAsB;QAAlC,iBAQC;QAPC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClC,IAAM,cAAY,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC;YAClD,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ;gBAC3D,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,cAAY,CAAC,QAAQ,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;QACtB,CAAC;IACH,CAAC;;gBA9CF,SAAS,SAAC;oBACT,QAAQ,EAAE,eAAe;oBACzB,QAAQ,EAAE,mBAAmB;oBAC7B,MAAM,EAAE,CAAC,2BAA2B,CAAC;iBACtC;;;;gBAVC,UAAU;;;uBAcT,KAAK;uBAEL,KAAK;0BACL,KAAK;;IAoCR,qBAAC;CAAA,AA/CD,IA+CC;SA1CY,cAAc","sourcesContent":["import {\n  Component,\n  Input,\n  ElementRef,\n  OnInit,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport * as Chart from 'chart.js';\n@Component({\n  selector: 'weather-chart',\n  template: '<canvas></canvas>',\n  styles: [':host { display: block; }']\n})\nexport class ChartComponent implements OnInit, OnChanges {\n  chart: any;\n\n  @Input()\n  type: 'line' | 'bar' | 'radar' | 'pie' | 'polarArea' | 'bubble' | 'scatter';\n  @Input() data: any;\n  @Input() options: any;\n\n  constructor(private elementRef: ElementRef) {}\n\n  ngOnInit() {\n    this.options.scales = {\n      yAxes: [\n        {\n          ticks: {\n            // Remove excess decimal places\n            callback: function(value: any) {\n              return Number(value.toFixed(0));\n            }\n          }\n        }\n      ]\n    };\n    this.chart = new Chart(\n      this.elementRef.nativeElement.querySelector('canvas'),\n      {\n        type: this.type,\n        data: this.data,\n        options: this.options\n      }\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.chart && changes['data']) {\n      const currentValue = changes['data'].currentValue;\n      ['datasets', 'labels', 'xLabels', 'yLabels'].forEach(property => {\n        this.chart.data[property] = currentValue[property];\n      });\n      this.chart.update();\n    }\n  }\n}\n"]}